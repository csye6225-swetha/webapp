name: BUILD-AMI

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 20
          distribution: 'temurin'

      - name: Copy file to /opt
        run: |
          sudo mkdir -p /opt
          sudo cp ./accounts.csv /opt/

          
      - name: Set up MySQL
        env:
           MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -p 3306:3306 -d mysql:latest

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

      - name: Build jar and run Maven 
        run: |
          mvn install -DskipTests 
          cd target
          nohup java -jar webapp-0.0.1-SNAPSHOT.jar > app.log 2>&1 &

      - name: Wait for Application to Start
        run: sleep 40

      - name: CHANGE DIRECTORY
        run: |
          cd ..
          ls
          

      - name: Run Integration Tests
        env:
          DB_URL: jdbc:mysql://localhost:3306/webapp_DB
          DB_USERNAME: root
          DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          mvn test

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
         version: "latest"

      - name: Run Packer init
        id: init
        run: |
         packer init packer/debian.pkr.hcl

      - name: Build AMI
        run: |
         output=$(packer build -var 'source_file=/home/runner/work/webapp/webapp/target/webapp-0.0.1-SNAPSHOT.jar' -var 'accounts_file=/home/runner/work/webapp/webapp/accounts.csv' packer/debian.pkr.hcl)
         echo "$output"
         ami_id=$(echo "$output" | grep -oP 'us-east-1: \Kami-\w+')
         echo "AMI_ID=$ami_id" >> $GITHUB_ENV
      
      - name: Display AMI
        run: echo "The AMI ID is $AMI_ID"

      - name: Update Launch Template and Refresh Instances
        run: |
          #!/bin/bash
          set -e
      
          latest_ami_id=${{ needs.previous_job.outputs.ami_id }}
      
          # Dynamically determine the launch template name
          # Adjust the query based on your criteria (e.g., tags, naming patterns)
          launch_template_name=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[?contains(LaunchTemplateName, `launch_template`)].LaunchTemplateName' --output text)
          if [ -z "$launch_template_name" ]; then
            echo "Launch template not found"
            exit 1
          fi
      
          echo "Using launch template: $launch_template_name"
      
          # Dynamically determine the auto scaling group name
          # Adjust the query based on your criteria (e.g., tags, naming patterns)
          asg_name=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(AutoScalingGroupName, `my-auto-scaling-group`)].AutoScalingGroupName' --output text)
          if [ -z "$asg_name" ]; then
            echo "Auto Scaling Group not found"
            exit 1
          fi
      
          echo "Using Auto Scaling Group: $asg_name"
      
          # Create a new version of the Launch Template with the latest AMI
          new_version=$(aws ec2 create-launch-template-version --launch-template-name "$launch_template_name" --version-description "New version" --launch-template-data "{\"ImageId\":\"$latest_ami_id\"}")
      
          # Extract the new version number
          new_version_number=$(echo $new_version | jq -r '.LaunchTemplateVersion.VersionNumber')
      
          # Update the Auto Scaling Group to use the new Launch Template version
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --launch-template "{\"LaunchTemplateName\":\"$launch_template_name\",\"Version\":\"$new_version_number\"}"
      
          # Start an instance refresh
          aws autoscaling start-instance-refresh --auto-scaling-group-name "$asg_name"
      
          # Wait for the instance refresh to complete
          while true; do
            sleep 30
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$asg_name" --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$refresh_status" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              break
            elif [ "$refresh_status" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
            echo "Waiting for instance refresh to complete..."
          done
      
      

      
          
      


    
        



